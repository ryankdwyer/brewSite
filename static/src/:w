import React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import TextField from 'material-ui/TextField';
import Paper from 'material-ui/Paper';
import { MenuItem } from 'material-ui/Menu';
import SelectField from 'material-ui/SelectField';
import RaisedButton from 'material-ui/RaisedButton';
import * as actionCreators from '../actions/auth';
import { GRAINS } from '../constants/index';

function mapStateToProps(state) {
    return {
        isRegistering: state.auth.isRegistering,
        registerStatusText: state.auth.registerStatusText,
    };
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

@connect(mapStateToProps, mapDispatchToProps)
class SRMCalculator extends React.Component {
    
    constructor(props) {
        super(props);
        this.state = {
            batchSize: 5,
            grain1: {},
            grain2: {},
            grain3: {},
            pounds1: '',
            pounds2: '',
            pounds3: '',
            keys: [1, 2, 3],
            srm: '',
			colorHex: '',
        };
    }

    handleUserInput = (e) => {
        const name = e.target.name;
        const value = e.target.value;
        this.setState({[name]: value});
    }

    handleChange = (type) => (event, index, value) => {
        let stateCopy = Object.assign({}, this.state);
        stateCopy[type] = value;
        this.setState(stateCopy);
    }

    reset = () => {
        this.setState({ 
            batchSize: 5,
            grain1: {},
            grain2: {},
            grain3: {},
            pounds1: '',
            pounds2: '',
            pounds3: '',
        });
    }

    calcMCU = (pounds, lovibond, gallons) => {
        return (pounds * lovibond) / gallons;
    }

    moreyCalc = (mcu) => {
        return 1.4922 * (Math.pow(mcu, 0.6859));
    }

    srmToHex = (srm) => {
    	// Returns an RGB value based on SRM
    	var r=0, g=0, b=0;

    	if (srm>=0 && srm<=1) {
    	    r = 240;
    	    g = 239;
    	    b = 181;
    	} else if (srm>1 && srm<=2) {
    	    r = 233;
    	    g = 215;
    	    b = 108;
    	} else if (srm>2) {
    	    // Set red decimal
    	    if (srm<70.6843) {        
    	        r = 243.8327-6.4040*srm+0.0453*srm*srm;
    	    } else {
    	        r = 17.5014;
    	    }
    	    // Set green decimal
    	    if (srm<35.0674) {
    	        g = 230.929-12.484*srm+0.178*srm*srm;
    	    } else {
    	        g = 12.0382;
    	    }
    	    // Set blue decimal
    	    if (srm<4) {
    	        b = -54*srm+216;
    	    } else if (srm>=4 && srm<7) {
    	        b = 0;
    	    } else if (srm>=7 && srm<9) {
    	        b = 13*srm-91;
    	    } else if (srm>=9 && srm<13) {
    	        b = 2*srm+8;
    	    } else if (srm>=13 && srm<17) {
    	        b = -1.5*srm+53.5;
    	    } else if (srm>=17 && srm<22) {
    	        b = 0.6*srm+17.8;
    	    } else if (srm>=22 && srm<27) {
    	        b = -2.2*srm+79.4;
    	    } else if (srm>=27 && srm<34) {
    	        b = -0.4285*srm + 31.5714;
    	    } else {
    	        b = 17;
    	    }
    	}
    	var red = this.doubleToHex(r);
    	var green = this.doubleToHex(g);
    	var blue = this.doubleToHex(b);
    	return ""+red+green+blue;
    }

	doubleToHex = (d) => {
    	// Converts decimal in string to hex in string 
    	var hexText = d.toString(16);
    	var point = hexText.indexOf(".");
    	if (point != -1) {
    	    hexText = hexText.substring(0,point);
    	}
    	while (hexText.length < 2) {
    	    hexText = "0"+hexText;    
    	}
    	return hexText;
	}

    calculate = () => { 
        let tempState = Object.assign({}, this.state);
        let gallons = tempState.batchSize;
        let mcu = 0;
        this.state.keys.forEach(function(key) {
            let pounds = tempState['pounds' + key];
            let lovibond = tempState['grain' + key].lovibond;
            mcu += this.calcMCU(pounds, lovibond, gallons);
        }, this);
        let srm = this.moreyCalc(mcu);
        this.setState({srm:srm});
		let colorHex = this.srmToHex(srm);
		this.setState({colorHex:colorHex});
    }

    render () {
		const paperStyle = {
		    marginTop: 25,
		    paddingBottom: 50,
		    paddingTop: 50,
		    width: '100%',
		    textAlign: 'center',
		    display: 'inline-block',
		};
		const srmHex = {
            float: 'left',
            height: 150,
            width: 150,
            backgroundColor: this.state.colorHex,
        };


        return(
			<div>
            	<h1>SRM Calculator</h1>
            	<hr />
            	<div className="col-md-8">
					<div className="col-md-12">
    					<TextField
						  type="number"
						  value={this.state.batchSize}
						  name="batchSize"
						  onChange={(event) => this.handleUserInput(event)}
    					  hintText="Batch Size (gal)"
    					  floatingLabelText="Batch Size (gal)"
    					  floatingLabelFixed={true}
    					/>
					</div>
					<div className="col-md-6">
    					<TextField
						  type="number"
						  name="pounds1"
						  value={this.state.pounds1}
						  onChange={(event) => this.handleUserInput(event)}
    					  hintText="Pounds"
    					  floatingLabelFixed={true}
    					/>
					</div>
			        <div className="col-md-6">
          			    <SelectField
                          value={this.state.grain1.grain}
                          name="units"
                          hintText="Grain"
          			      onChange={this.handleChange('grain1')}>
                          {
                              GRAINS.map(grain => {
                                return <MenuItem value={grain}>{grain.grain}</MenuItem>
                              })
                          }
          			      <MenuItem value={'C'} primaryText="Celsius"></MenuItem>
          			    </SelectField>
                    </div>
                    <div className="col-md-6">
    					<TextField
						  type="number"
						  name="pounds2"
						  value={this.state.pounds2}
						  onChange={(event) => this.handleUserInput(event)}
    					  hintText="Pounds"
    					  floatingLabelFixed={true}
    					/>
					</div>
			        <div className="col-md-6">
          			    <SelectField
                          value={this.state.grain2.grain}
                          name="units"
                          hintText="Grain"
          			      onChange={this.handleChange('grain2')}>
                          {
                              GRAINS.map(grain => {
                                  return <MenuItem value={grain}>{grain.grain}</MenuItem>
                                })
                          }
          			    </SelectField>
                    </div>
                    <div className="col-md-6">
    					<TextField
						  type="number"
						  name="pounds3"
						  value={this.state.pounds3}
						  onChange={(event) => this.handleUserInput(event)}
    					  hintText="Pounds"
    					  floatingLabelFixed={true}
    					/>
					</div>
			        <div className="col-md-6">
          			    <SelectField
                          value={this.state.grain3.grain}
                          name="units"
                          hintText="Grain"
          			      onChange={this.handleChange('grain3')}>
                          {
                              GRAINS.map(grain => {
                                  return <MenuItem value={grain}>{grain.grain}</MenuItem>
                                })
                          }
          			    </SelectField>
                    </div>
					<div className="col-md-12">
            	    	<RaisedButton
            	    	  style={{ marginTop: 50 }}
            	    	  label="Calculate"
            	    	  onClick={(e) => this.calculate(e)}
            	    	/>
                        <RaisedButton
            	    	  style={{ marginTop: 50 }}
            	    	  label="Reset"
            	    	  onClick={this.reset}
            	    	/>
					</div>
                </div>
            	<div className="col-md-6 col-md-offset-3">
                    <Paper style={paperStyle}>
                        <h4>SRM: </h4>
                        <h3>{this.state.srm}</h3>
                    </Paper>
                    <Paper style={paperStyle}>
                        <h4>SRM Hex: </h4>
                        <h3>{this.state.colorHex}</h3>
                        <div style="width: 200px">
                            <div style={colorHex}> </div>
                        </div>
                    </Paper>
                    <Paper style={paperStyle}>
                        <h4>EBC: </h4>
                        <h3>{this.state.ebc}</h3>
                    </Paper>
                    <Paper style={paperStyle}>
                        <h4>Approximate Color:</h4>
                        <h3>{this.state.approxColor}</h3>
                    </Paper>
                </div>
			</div>
        );
    }
}

export default SRMCalculator;
